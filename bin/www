/* eslint-disable global-require */
const logger = require('debug')('app');
const http = require('http');
const { optionsDb } = require('../src/config/options.db');
const { init: initDb } = require('../src/services/db');
const { normalizePort } = require('../src/utils');

const logError = logger.extend('error');
(async () => {
  // init scripts for db
  await initDb(optionsDb);

  const app = require('../src/app');
  /**
     * Create HTTP server.
     */
  const server = http.createServer(app);

  /**
     * Get port from environment and store in Express.
     */

  const port = normalizePort(process.env.PORT || 3000);
  app.set('port', port);

  server.on('error', (error) => {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string'
      ? `Pipe ${port}`
      : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        // eslint-disable-next-line no-console
        logError(`${bind} requires elevated privileges`);
        process.exit(1);
        break;
      case 'EADDRINUSE':
        // eslint-disable-next-line no-console
        logError(`${bind} is already in use`);
        process.exit(1);
        break;
      default:
        throw error;
    }
  });

  /**
     * Event listener for HTTP server "listening" event.
     */
  server.on('listening', () => {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? `pipe ${addr}`
      : `port ${addr.port}`;
    logger(`Listening on ${bind}`);
  });

  /**
     * Listen on provided port, on all network interfaces.
     */
  server.listen(port);
})().catch((err) => {
  logError(err);
  process.exit(1);
});
